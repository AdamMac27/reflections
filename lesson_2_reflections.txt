What happens when you initialize a repository? Why do you need to do it?

It creates a new .git file which stores all git history for the repository.
This is necessary to add commits and track changes when running version-
control.

How is the staging area different from the working directory and the repository? 
What value do you think it offers?

The staging area is a virtual area that you can store files before commiting 
them to the directory and repository. This allows you to temporarily store 
documents while working on other files before committing.

How can you use the staging area to make sure you have one commit per logical 
change?

If a logical change affected more than one file, you'd want all files involed
to be committed at the same time and that's where the staging area allows you
to store these files until you are ready to commit all of them at once.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches are helpful when you are altering code that isn't uniform to every
version, it is special cased to specific audiences. For example branches help
when creating experimental or language versions where you still want the
original version unchanged.

How do the diagrams help you visualize the branch structure?

Diagrams allow you to identify which commits can be reached on different branches
and which can't. It is a nice process map of the whole project at hand.

What is the result of merging two branches together? Why do we represent it in the
diagram the way we do?

The result of merging two branches together is one branch including all the 
changes made between the two branches.

